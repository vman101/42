#include "get_next_line.h"

size_t	find_newline(char *buf)
{
	size_t	i;

	i = 0;
	while (*buf)
	{
		if (*buf == '\n')
			return (i + 1);
		i++;
		buf++;
	}
	return (0);
}

void	*ft_calloc(size_t n, size_t s)
{
	void	*ptr_new;
	void	*ptr_back;
	size_t	i;

	if (n == 0)
		return (malloc(0));
	if (SIZE_MAX / n < s)
		return (NULL);
	ptr_new = malloc(n * s);
	if (!ptr_new)
		return (NULL);
	i = 0;
	ptr_back = ptr_new;
	while (i < s * n)
		*(char *)ptr_new++ = 0;
	return (ptr_back);
}

void	*buffer_extend(void *ptr_old, size_t size_new, size_t size_old)
{
	void	*ptr_new;
	void	*ptr_back;
	void	*ptr_old_free;

	ptr_new = ft_calloc(size_new + 1, 1);
	if (!ptr_new)
		return (NULL);
	ptr_back = ptr_new;
	ptr_old_free = ptr_old;
	while (size_old--)
		*(char *)ptr_new++ = *(char *)ptr_old++;
	free(ptr_old_free);
	return (ptr_back);
}

char	*handle_no_nl(char **buf, char **left)
{
	char	*end;

	if (ft_strlen(*buf) || ft_strlen(*left))
	{
		end = ft_strjoin(*left, *buf);
		free(*left);
		free(*buf);
		return (end);
	}
	else
		return (NULL);
}

char	*line_extract(char **buf, ssize_t bytes_read)
{
	char static	*left;
	char		*line_new;
	char		*line_back;
	size_t		line_len;

	line_len = find_newline(*buf);
	if (line_len && bytes_read)
	{
		line_new = ft_calloc(line_len + 1, sizeof(*line_back));
		if (!line_new)
			return (NULL);
		line_back = line_new;
		while (line_len--)
			*line_new++ = **buf++;
		left = ft_calloc(ft_strlen(*buf) - line_len, sizeof(*line_new));
		if (!left)
			return (NULL);
		while (**buf)
			*left++ = **buf++;
		free (*buf);
		return (line_back);
	}
	else
		return (handle_no_nl(buf, &left));
}

char	*get_next_line(int fd)
{
	char		*buf;
	ssize_t		bytes_read;
	size_t		buf_size;

	buf = ft_calloc(sizeof(*buf), BUFFER_SIZE + 1);
	buf_size = BUFFER_SIZE;
	while (1)
	{
		if (!buf)
			return (NULL);
		bytes_read = read(fd, buf + buf_size, BUFFER_SIZE);
		if (bytes_read == -1)
			return (NULL);
		if (find_newline(buf))
			break ;
		if (bytes_read == 0)
			break ;
		buf_size += BUFFER_SIZE;
		buf = buffer_extend(buf, buf_size + 1, buf_size - BUFFER_SIZE);
	}
	return (line_extract(&buf, bytes_read));
}

int main()
{
	char	*input_line;
	int		input;
	int		output;

	input = open("./input", O_RDONLY);
	output = open("./output", O_WRONLY);

	input_line = NULL;
	while (input_line)
	{
		input_line = get_next_line(input);
		write(output, input_line, ft_strlen(input_line));
		free(input_line);
	}
	close(input);
	close(output);
}

